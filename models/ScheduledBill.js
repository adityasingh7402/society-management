import mongoose from 'mongoose';

const ScheduledBillSchema = new mongoose.Schema({
  societyId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Society',
    required: true
  },
  billHeadId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'BillHead',
    required: true
  },
  name: {
    type: String,
    required: true
  },
  description: String,
  
  // Schedule configuration
  frequency: {
    type: String,
    enum: ['Monthly', 'Quarterly', 'HalfYearly', 'Yearly'],
    required: true
  },
  dayOfMonth: {
    type: Number,
    required: true,
    min: 1,
    max: 31
  },
  startDate: {
    type: Date,
    required: true
  },
  endDate: Date,
  
  // Target configuration
  targetType: {
    type: String,
    enum: ['All', 'Block', 'Floor', 'Flat', 'ResidentType', 'Custom'],
    required: true
  },
  targetConfig: {
    blocks: [String],
    floors: [String],
    flats: [String],
    residentTypes: [{
      type: String,
      enum: ['Owner', 'Tenant', 'Both']
    }],
    customQuery: mongoose.Schema.Types.Mixed
  },
  
  // Amount configuration
  amountType: {
    type: String,
    enum: ['Fixed', 'PerUnit', 'Formula', 'Custom'],
    required: true
  },
  amountConfig: {
    fixedAmount: Number,
    perUnitRate: Number,
    formula: String,
    customLogic: mongoose.Schema.Types.Mixed
  },
  
  // Due date configuration
  dueDateConfig: {
    daysAfterGeneration: {
      type: Number,
      required: true,
      default: 15
    }
  },
  
  // Automation configuration
  isAutoGenerated: {
    type: Boolean,
    default: true
  },
  requiresApproval: {
    type: Boolean,
    default: false
  },
  notifyAfterGeneration: {
    type: Boolean,
    default: true
  },
  
  // Execution tracking
  lastRunStatus: {
    runDate: Date,
    status: {
      type: String,
      enum: ['Success', 'Partial', 'Failed']
    },
    billsGenerated: Number,
    errorLog: String
  },
  nextRunDate: Date,
  
  // Status
  status: {
    type: String,
    enum: ['Active', 'Inactive', 'Completed', 'Error'],
    default: 'Active'
  },
  
  // Audit
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  updatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }
}, {
  timestamps: true
});

// Calculate next run date
ScheduledBillSchema.methods.calculateNextRunDate = function() {
  const today = new Date();
  const lastRun = this.lastRunStatus?.runDate || this.startDate;
  let nextRun = new Date(lastRun);
  
  // Set the day of month
  nextRun.setDate(this.dayOfMonth);
  
  // Adjust month based on frequency
  switch(this.frequency) {
    case 'Monthly':
      nextRun.setMonth(nextRun.getMonth() + 1);
      break;
    case 'Quarterly':
      nextRun.setMonth(nextRun.getMonth() + 3);
      break;
    case 'HalfYearly':
      nextRun.setMonth(nextRun.getMonth() + 6);
      break;
    case 'Yearly':
      nextRun.setFullYear(nextRun.getFullYear() + 1);
      break;
  }
  
  // If next run is in the past, keep adding periods until it's in the future
  while (nextRun <= today) {
    switch(this.frequency) {
      case 'Monthly':
        nextRun.setMonth(nextRun.getMonth() + 1);
        break;
      case 'Quarterly':
        nextRun.setMonth(nextRun.getMonth() + 3);
        break;
      case 'HalfYearly':
        nextRun.setMonth(nextRun.getMonth() + 6);
        break;
      case 'Yearly':
        nextRun.setFullYear(nextRun.getFullYear() + 1);
        break;
    }
  }
  
  // Check if we've passed the end date
  if (this.endDate && nextRun > this.endDate) {
    return null;
  }
  
  return nextRun;
};

// Pre-save middleware
ScheduledBillSchema.pre('save', function(next) {
  // Calculate next run date
  this.nextRunDate = this.calculateNextRunDate();
  
  // Update status if we've passed end date
  if (this.endDate && new Date() > this.endDate) {
    this.status = 'Completed';
  }
  
  next();
});

// Indexes
ScheduledBillSchema.index({ societyId: 1, status: 1 });
ScheduledBillSchema.index({ nextRunDate: 1, status: 1 });

export default mongoose.models.ScheduledBill || mongoose.model('ScheduledBill', ScheduledBillSchema); 